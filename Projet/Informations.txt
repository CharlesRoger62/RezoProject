
In this archive is provided a list of files that will allow you to see a simple way to define a shell/console at the client side.

You will see here that there is two-level hierachy of commands that the user can enter. To know a bit more how to use this set of commands
I've also put the PDF of the students from which I 've extracted this piece of codes. Read it briefly, but not in too
much details, because, the goal is simply to drive you in the way you should interact through the shell. 

All this material is extracted from 2019 academic year project, where the students were requested to simulate a sort of a slack. 
But using some technology (JMS - ActiveMQ) that is not (yet) requested for your own project which will consists in doing 
a simplified Discord application.

To launch their application, they had however to first connect to a server (eg. it will be the Discord server), where the
user will pass a login and a password (check the PDF to see how these credentials had to be entered in the console at client side).
If these credentials are those expected, the server sends back a stub of a second
RMI object that was implementing the logic of the application of the 2019-20 academic year (a slack like with
some textual channels-topics to subscribe to and publish to). You will see, if you run the
project, that some (second level) commands from the client, will end up calling remote methods exposed by this second RMI object.
Like exposing the existing list of channels, subscribe to some. I have removed all the code that effectively publish or
subscribe data to the channel. Just to simplify, and just to have you focus on the console/shell client side.

Be aware that in this shell, some command execution prints some String, like: 
	System.out.println("Connected to topic #"+idTopic+" as "+"\u001B[31m"+pseudo+"\u001B[0m");
However, double check, but it seems (for me at least) that the unicode characters  \u001B and 31m are not
giving the expected visual effect (surlign the pseudo in white/red).
 Document yourself to see if / what to put instead, so that you get some coloured characters
on your console at client side.

----------------------
To launch the server, nothing specific is required as neither JVM nor program arguments.  The server creates the registry
in the main method, on port 1099. It creates by defauls three topics/channels, whose name is (not well chosen!), 1, 2 and 3.
And two users (Alice and Pierre) with their respective password.

To launch the client, please, simply pass a program argument the IP (or name) of the machine where the server runs.

In this archive, I provide thus two directories: one is the set of files needed as source for the server side. The other is
the same regarding the client side.

This is then a good starting point for your own project this year! But much more will need to be added!

